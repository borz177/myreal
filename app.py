
from utils import allowed_file
from sqlalchemy import or_
from flask import Flask, jsonify, abort
from sqlalchemy.exc import IntegrityError
from dateutil.relativedelta import relativedelta
from babel.dates import format_datetime
from flask_login import LoginManager, login_user, logout_user, current_user

from flask import Response, render_template, url_for
from flask_migrate import Migrate
from models import User, Item, Payment, License, Investor, Balance, Transaction
from config import Config

from datetime import datetime, date, timezone, timedelta

from werkzeug.utils import secure_filename
from flask import send_file, flash, redirect, request, current_app
from flask_login import login_required
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import os
from authlib.integrations.flask_client import OAuth
from flask import session
import secrets
from dotenv import load_dotenv
from flask_migrate import upgrade
from extensions import db


from flask import request, redirect, flash, url_for, abort
import re
from urllib.parse import quote
from flask import send_from_directory
import uuid
from flask_session import Session
from flask_apscheduler import APScheduler
from babel.dates import format_date



load_dotenv(encoding='UTF-8')


config = Config()  # —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º @property

app = Flask(__name__)
app.config.from_object(Config)
# –ü—É—Ç—å –¥–ª—è PDF —Ñ–∞–π–ª–æ–≤
app.config['UPLOAD_FOLDER_PDFS'] = os.path.join('static', 'uploads', 'pdfs')
# –ü—É—Ç—å –∫ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ (–µ—Å–ª–∏ —Ç—ã –Ω–∞ –ø—Ä–æ–¥–µ)
app.config['UPLOAD_FOLDER'] = os.path.join('static', 'uploads')

# –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–ª–∏ —Å–æ–∑–¥–∞–π –µ–≥–æ
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(app.config['UPLOAD_FOLDER_PDFS'], exist_ok=True)




db.init_app(app)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask-Session
Session(app)
migrate = Migrate(app, db)

login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.init_app(app)

oauth = OAuth(app)
oauth.register(
    name='google',
    client_id=app.config["GOOGLE_CLIENT_ID"],
    client_secret=app.config["GOOGLE_CLIENT_SECRET"],
    server_metadata_url=app.config["GOOGLE_DISCOVERY_URL"],
    client_kwargs={'scope': 'openid email profile'},
    #redirect_uri=app.config["GOOGLE_REDIRECT_URI"]  # üîß —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
)



scheduler = APScheduler()

def clear_expired_tokens():
    print("–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤...")
    expiration_time = datetime.utcnow() - timedelta(days=7)
    expired_items = Item.query.filter(Item.token_created_at != None, Item.token_created_at < expiration_time).all()

    for item in expired_items:
        item.access_token = None
        item.token_created_at = None
        print(f"–¢–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω –¥–ª—è item_id={item.id}")

    if expired_items:
        db.session.commit()

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler.add_job(
    id='clear_expired_tokens',
    func=clear_expired_tokens,
    trigger='interval',
    hours=12  # —Ä–∞–∑ –≤ 12 —á–∞—Å–æ–≤
)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Flask
scheduler.init_app(app)
scheduler.start()
# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ä–∞–∑—Ä–µ—à–∏—Ç—å http)
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'


# –ù–ê–°–¢–†–û–ô–ö–ê: –ø–æ–ª–∏—Ç–∏–∫–∞ "–¥–æ –∫–∞–∫–æ–≥–æ –¥–Ω—è –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –º–µ—Å—è—Ü"
# –í–∞—Ä–∏–∞–Ω—Ç—ã:
# 1 ‚Äî "end_of_month" ‚Äî –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞ (31.07.2025)
# 2 ‚Äî —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 15 => –¥–æ 15 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ (15.07.2025)
# 3 ‚Äî N –¥–Ω–µ–π –ø–æ—Å–ª–µ –¥–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–Ω–µ–π

PAYMENT_POLICY = {
    "mode": "end_of_month",  # "end_of_month" | "fixed_day" | "grace_days"
    "fixed_day": 15,         # –µ—Å–ª–∏ mode = "fixed_day"
    "grace_days": 10         # –µ—Å–ª–∏ mode = "grace_days"
}


dt = datetime.now()
formatted = format_datetime(dt, locale='ru')
print(formatted)


def get_due_date(expected_date):
    """
    expected_date ‚Äî –¥–∞—Ç–∞, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏–ª –æ–∂–∏–¥–∞–µ–º—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –º–µ—Å—è—Ü
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞–π–Ω—é—é –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã
    """
    if PAYMENT_POLICY["mode"] == "end_of_month":
        # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        next_month = expected_date + relativedelta(months=1)
        due_date = next_month.replace(day=1) - timedelta(days=1)
        return due_date

    elif PAYMENT_POLICY["mode"] == "fixed_day":
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 15 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞)
        next_month = expected_date + relativedelta(months=1)
        due_day = PAYMENT_POLICY["fixed_day"]
        try:
            due_date = next_month.replace(day=due_day)
        except ValueError:
            # –ï—Å–ª–∏ –≤ –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Ñ–µ–≤—Ä–∞–ª—è), –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
            next_month = next_month + relativedelta(months=1)
            due_date = next_month.replace(day=1) - timedelta(days=1)
        return due_date

    elif PAYMENT_POLICY["mode"] == "grace_days":
        # N –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–µ–º–æ–π –¥–∞—Ç—ã
        grace_days = PAYMENT_POLICY["grace_days"]
        due_date = expected_date + timedelta(days=grace_days)
        return due_date

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞
        next_month = expected_date + relativedelta(months=1)
        due_date = next_month.replace(day=1) - timedelta(days=1)
        return due_date



# –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ä–∞–∑—Ä–µ—à–∏—Ç—å http)
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'




@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))






# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def home():
    if current_user.is_authenticated:
        return redirect(url_for("dashboard"))  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ dashboard
    return render_template("home.html")  # –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞



@app.route("/login")
def login():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ state –∏ nonce –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
    state = secrets.token_urlsafe(32)
    nonce = secrets.token_urlsafe(32)
    print("BEFORE REDIRECT ‚Äî SESSION:", session)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º timezone-aware datetime)
    session['oauth_state'] = {
        'value': state,
        'created_at': datetime.now(timezone.utc).isoformat()
    }
    session['nonce'] = nonce

    session['next_url'] = request.args.get('next')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º next URL –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    # –§–æ—Ä–º–∏—Ä—É–µ–º redirect_uri —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    #redirect_uri = url_for('auth_callback', _external=True)
    redirect_uri = Config.GOOGLE_REDIRECT_URI
    return oauth.google.authorize_redirect(
        redirect_uri=redirect_uri,
        state=state,
        nonce=nonce,
        prompt="select_account",
        include_granted_scopes="true",
        access_type="offline"
    )

@app.route("/auth/callback")
def auth_callback():
    if 'state' not in request.args:
        return "Missing state parameter", 400

    saved_state = session.pop('oauth_state', None)
    if not saved_state:
        return "Session expired or invalid state", 400

    state_created = datetime.fromisoformat(saved_state['created_at'])
    if datetime.now(timezone.utc) - state_created > timedelta(minutes=10):
        return "State expired", 400

    if request.args['state'] != saved_state['value']:
        return "Invalid state parameter", 400

    nonce = session.pop('nonce', None)
    if not nonce:
        return "Nonce missing", 400

    try:
        token = oauth.google.authorize_access_token()
        user_info = oauth.google.parse_id_token(token, nonce=nonce)
        if not user_info or 'email' not in user_info:
            return "Failed to retrieve user info", 400

        email = user_info.get("email", "").lower()
        user = User.query.filter_by(email=email).first()

        if not user:
            if email == "borz017795@gmail.com":
                app.logger.info("Creating admin user...")

                user = User(email=email, is_admin=True)
                db.session.add(user)
                db.session.flush()  # –ø–æ–ª—É—á–∞–µ–º user.id

                # –í—ã–¥–∞—ë–º –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 1 –≥–æ–¥
                license = License(
                    user_id=user.id,
                    activated_at=datetime.utcnow(),
                    expires_at=datetime.utcnow() + timedelta(days=365),
                    is_active=True,
                    activated_by=None
                )
                db.session.add(license)
                db.session.commit()
            else:
                return render_template("license_required.html")
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω ‚Üí –ª–æ–≥–∏–Ω–∏–º
        login_user(user, remember=True)

        # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º
        return redirect(session.pop("next_url", None) or url_for("dashboard"))

    except Exception as e:
        app.logger.error(f"OAuth error: {str(e)}", exc_info=True)
        return "Authentication failed", 400





# üîí –°—Ç—Ä–∞–Ω–∏—Ü–∞ "–õ–∏—Ü–µ–Ω–∑–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è"
@app.route("/license-required")
def license_required_page():
    return render_template("license_required.html")







# üîì –í—ã—Ö–æ–¥
@app.route("/logout")
@login_required
def logout():
    logout_user()
    return redirect(url_for("home"))


@app.route("/admin/users")
@login_required
def admin_users():
    if not current_user.is_admin:
        abort(403)

    search_query = request.args.get("search")  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if search_query:
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –ø–æ–∏—Å–∫)
        users = User.query.filter(User.email.ilike(f"%{search_query}%")).all()
    else:
        users = User.query.all()  # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –ø—É—Å—Ç–æ–π ‚Äî –≤—ã–≤–æ–¥–∏–º –≤—Å–µ—Ö

    return render_template("admin_users.html", users=users)

@app.route("/admin/add_user", methods=["POST"])
@login_required
def add_user_by_email():
    if not current_user.is_admin:
        abort(403)

    email = request.form.get("email", "").strip().lower()
    if not email:
        return redirect(url_for("admin_users"))

    user = User.query.filter_by(email=email).first()
    if not user:
        user = User(email=email, is_admin=False)
        db.session.add(user)
        db.session.flush()  # user.id

    # –í—ã–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ 1 –≥–æ–¥
    license = License(
        user_id=user.id,
        activated_at=datetime.utcnow(),
        expires_at=datetime.utcnow() + timedelta(days=365),
        is_active=True,
        activated_by=current_user.id
    )
    db.session.add(license)
    db.session.commit()

    flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ª–∏—Ü–µ–Ω–∑–∏—è –≤—ã–¥–∞–Ω–∞", "success")
    return redirect(url_for("admin_users"))


@app.route("/admin/toggle_admin/<int:user_id>", methods=["POST"])
@login_required
def toggle_admin(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    user.is_admin = not user.is_admin
    db.session.commit()
    return redirect(url_for("admin_users"))
@app.route("/admin/activate_license/<int:user_id>", methods=["POST"])
@login_required
def activate_license(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    expiration_str = request.form.get("expiration", "").strip()

    if not expiration_str:
        flash("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞", "danger")
        return redirect(url_for("admin_users"))

    try:
        expiration_date = datetime.strptime(expiration_str, "%d.%m.%Y")
    except ValueError:
        flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥", "danger")
        return redirect(url_for("admin_users"))

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for license in user.licenses:
        license.is_active = False

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏—é
    new_license = License(
        user_id=user.id,
        activated_at=datetime.utcnow(),
        expires_at=expiration_date,
        is_active=True,
        activated_by=current_user.id
    )
    db.session.add(new_license)
    db.session.commit()

    flash(f"–ù–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {expiration_date.strftime('%d.%m.%Y')}", "success")
    return redirect(url_for("admin_users"))

#–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route("/admin/user/<int:user_id>/licenses")
@login_required
def user_license_history(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    licenses = License.query.filter_by(user_id=user.id).order_by(License.activated_at.desc()).all()
    return render_template("license_history.html", user=user, licenses=licenses)




#–†–æ—É—Ç –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –≤—Ä—É—á–Ω—É—é
@app.route("/admin/deactivate_license/<int:license_id>", methods=["POST"])
@login_required
def deactivate_license(license_id):
    if not current_user.is_admin:
        abort(403)

    license = License.query.get_or_404(license_id)
    license.is_active = False
    db.session.commit()

    flash("–õ–∏—Ü–µ–Ω–∑–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", "warning")
    return redirect(url_for("user_license_history", user_id=license.user_id))


@app.route("/admin/delete_user/<int:user_id>", methods=["POST"])
@login_required
def delete_user(user_id):
    if not current_user.is_admin:
        abort(403)

    user = User.query.get_or_404(user_id)
    if user.email == current_user.email:
        # –ó–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–±—è
        return redirect(url_for("admin_users"))

    if user.items or user.licenses:  # üëà –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
        flash("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", "danger")
        return redirect(url_for("admin_users"))

    db.session.delete(user)
    db.session.commit()
    flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", "success")
    return redirect(url_for("admin_users"))








@app.route("/offline")
def offline():
    return render_template("offline.html")

#—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã —Ä—É–±
def format_rubles(value):
    try:
        value = float(value)
        formatted = "{:,.2f}".format(value).replace(",", " ").replace(".", ",")
        return f"{formatted} ‚ÇΩ"
    except (ValueError, TypeError):
        return value

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ Jinja
app.jinja_env.filters['rub'] = format_rubles


@app.route('/item/edit/<int:item_id>', methods=['GET', 'POST'])
@login_required
def edit_item(item_id):
    item = Item.query.get_or_404(item_id)
    investors = Investor.query.filter_by(user_id=current_user.id).all()
    if not (current_user.is_admin or item.user_id == current_user.id):
        abort(403)



    if request.method == 'POST':
        item.name = request.form['name']
        item.price = request.form['price']
        item.purchase_price = request.form['purchase_price']
        item.installments = request.form['installments']
        item.client_name = request.form['client_name']
        item.client_phone = request.form['client_phone']
        item.guarantor_name = request.form['guarantor_name']
        item.guarantor_phone = request.form['guarantor_phone']
        item.user_id = current_user.id
        item.investor_id = request.form.get('investor_id') or None
        item.client_address = request.form.get('client_address', '').strip()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        first_payment_date_str = request.form.get('first_payment_date')
        if first_payment_date_str:
            try:
                item.first_payment_date = datetime.strptime(first_payment_date_str, '%Y-%m-%d').date()
            except ValueError:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞", "warning")
        else:
            item.first_payment_date = None
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        if 'delete_photo' in request.form and item.photo_url:
            photo_path = os.path.join(current_app.root_path, 'static', 'uploads', item.photo_url)
            if os.path.exists(photo_path):
                os.remove(photo_path)
            item.photo_url = None

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        photo = request.files.get('photo')
        if photo and allowed_file(photo.filename):
            filename = secure_filename(photo.filename)
            photo.save(os.path.join(current_app.config['UPLOAD_FOLDER'], filename))

            item.photo_url = filename

        db.session.commit()
        flash('–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ.', 'success')
        return redirect(url_for('contracts'))

    return render_template('edit_item.html', item=item, investors=investors)


@app.route('/item/delete/<int:item_id>', methods=['POST'])
@login_required

def delete_item(item_id):
    item = Item.query.get_or_404(item_id)

    if not (current_user.is_admin or item.user_id == current_user.id):
        flash("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "danger")
        return redirect(url_for('contracts'))
    if item.payments:
        flash("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É —É–∂–µ –±—ã–ª–∏ –≤–Ω–µ—Å–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏.", "danger")
        return redirect(url_for('contracts'))

    try:
        db.session.delete(item)
        db.session.commit()
        flash("‚úÖ –î–æ–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", "info")
    except IntegrityError:
        db.session.rollback()
        flash("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: –¥–æ–≥–æ–≤–æ—Ä —Å–≤—è–∑–∞–Ω —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.", "danger")

    return redirect(url_for('contracts'))





# –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç / –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route("/dashboard", methods=["GET", "POST"])
@login_required
def dashboard():

    if request.method == "POST":

        if not current_user.active_license:
            flash("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", "danger")
            return redirect(url_for("dashboard"))

        name = request.form.get("name")
        price = float(request.form.get("price"))
        purchase_price = float(request.form["purchase_price"])
        installments = int(request.form.get("installments"))
        client_name = request.form.get("client_name")
        guarantor_name = request.form.get("guarantor_name")
        client_phone = request.form["client_phone"]
        guarantor_phone = request.form["guarantor_phone"]
        photo = request.files.get("photo")
        photo_url = None
        down_payment_str = request.form.get("down_payment", "0")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "0"
        down_payment = float(down_payment_str) if down_payment_str else 0.0
        investor_id_raw = request.form.get("investor_id")
        print(f"DEBUG: investor_id from form = '{investor_id_raw}'")
        client_address = request.form.get("client_address", "").strip()

        # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        first_payment_date_str = request.form.get("first_payment_date")
        first_payment_date = None
        if first_payment_date_str:
            try:
                first_payment_date = datetime.strptime(first_payment_date_str, "%Y-%m-%d").date()
            except ValueError:
                flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î.", "danger")
                return redirect(url_for("dashboard"))



        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        investor_id = None
        if investor_id_raw and investor_id_raw != 'None':
            try:
                investor_id = int(investor_id_raw)
            except ValueError:
                investor_id = None

        # üîπ –ù–∞–π—Ç–∏ —Å—á—ë—Ç –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–∫—É–¥–∞ investor_id
        # üîπ –ù–∞–π–¥—ë–º —Å—á—ë—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
        selected_balance = Balance.query.filter_by(
            user_id=current_user.id,
            investor_id=investor_id
        ).order_by(Balance.is_default.desc()).first()

        if not selected_balance:
            flash("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—á—ë—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∏–Ω–≤–µ—Å—Ç–æ—Ä—É.", "danger")
            return redirect(url_for("dashboard", investor_id=investor_id or ""))

        # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —É –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        if selected_balance.amount < purchase_price:
            flash("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.", "danger")
            return redirect(url_for("dashboard", investor_id=investor_id or ""))

        # üîπ –í—ã—á–∏—Ç–∞–µ–º –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É
        selected_balance.amount -= purchase_price

        # üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if down_payment > 0:
            selected_balance.amount += down_payment

        db.session.add(selected_balance)

        created_at_str = request.form.get("created_at")
        created_at = datetime.strptime(created_at_str, "%Y-%m-%d") if created_at_str else datetime.utcnow()

        if photo and allowed_file(photo.filename):
            filename = f"{uuid.uuid4().hex}_{secure_filename(photo.filename)}"
            upload_path = current_app.config["UPLOAD_FOLDER"]
            os.makedirs(upload_path, exist_ok=True)
            photo.save(os.path.join(upload_path, filename))
            photo_url = filename

        last_number = db.session.query(
            db.func.max(Item.user_contract_number)
        ).filter_by(user_id=current_user.id).scalar()

        item = Item(
            name=name,
            price=price,
            purchase_price=purchase_price,
            buyer=current_user.email,
            user_id=current_user.id,
            status="–û—Ñ–æ—Ä–º–ª–µ–Ω",
            installments=installments,
            client_name=client_name,
            client_phone=client_phone,
            guarantor_name=guarantor_name,
            guarantor_phone=guarantor_phone,
            photo_url=photo_url,
            down_payment=down_payment,
            created_at=created_at,
            first_payment_date=first_payment_date,
            client_address=client_address,
            user_contract_number=(last_number or 0) + 1,
            investor_id=investor_id  # —É–∂–µ int –∏–ª–∏ None ‚Äî –û–ö!
        )
        db.session.add(item)
        db.session.commit()
        flash("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!", "success")
        # üëá –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard c –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤—ã–±—Ä–∞–Ω
        return redirect(url_for("dashboard", investor_id=investor_id if investor_id else ""))

    # GET-–∑–∞–ø—Ä–æ—Å ‚Äî —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    selected_id = request.args.get("investor_id", type=int)

    today = date.today()
    items = Item.query.filter(
        Item.user_id == current_user.id,
        db.func.date(Item.created_at) == today
    ).all()

    license_expiration = current_user.active_license.expires_at if current_user.active_license else None

    if current_user.is_admin:
        investors = Investor.query.all()
    else:
        investors = Investor.query.filter_by(user_id=current_user.id).all()

    return render_template(
        "dashboard.html",
        items=items,
        current_date=date.today().strftime("%Y-%m-%d"),
        license_expiration=license_expiration,
        investors=investors,
        selected_id=selected_id,
        user=current_user
    )



@app.route("/autocomplete")
@login_required
def autocomplete():
    query = request.args.get("query", "").strip().lower()

    # –ü–æ–∏—Å–∫ –ø–æ client_name —Å —É—á–µ—Ç–æ–º user_id
    results = (
        db.session.query(Item.client_name)
        .filter(
            Item.user_id == current_user.id,
            Item.client_name.ilike(f"%{query}%")
        )
        .distinct()
        .limit(10)
        .all()
    )

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å–ø–∏—Å–∫—É —Å—Ç—Ä–æ–∫
    client_names = [name for (name,) in results]

    return jsonify(client_names)



@app.route("/investors/add", methods=["GET", "POST"])
@login_required
def add_investor():
    if request.method == "POST":
        name = request.form["name"]
        initial_balance = float(request.form.get("initial_balance", 0.0))  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Ñ–æ—Ä–º—ã
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        profit_percent = int(request.form.get("profit_percent", 50))

        if not (0 <= profit_percent <= 100):
            flash("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", "danger")
            return redirect(url_for("add_investor"))

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
        investor = Investor(name=name, user_id=current_user.id, profit_percent=profit_percent)
        db.session.add(investor)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –±–µ–∑ –∫–æ–º–º–∏—Ç–∞ –≤—Å–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
        balance = Balance(
            user_id=current_user.id,
            investor_id=investor.id,
            amount=initial_balance,
            name="–ù–∞–ª–∏—á–Ω—ã–µ:",  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–º—è —Å—á—ë—Ç–∞
            is_default=False  # –ù–µ –¥–µ–ª–∞–µ–º —Å—á—ë—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
        )
        db.session.add(balance)
        db.session.commit()

        flash("–ò–Ω–≤–µ—Å—Ç–æ—Ä –∏ —Å—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", "success")
        return redirect(url_for("dashboard"))

    investors = Investor.query.filter_by(user_id=current_user.id).all()
    return render_template("add_investor.html", investors=investors)


@app.route('/investors/update_percent/<int:investor_id>', methods=['POST'])
def update_profit_percent(investor_id):
    investor = Investor.query.get_or_404(investor_id)
    try:
        profit_percent = int(request.form['profit_percent'])

        if not (0 <= profit_percent <= 100):
            flash("–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100", "danger")
            return redirect(url_for("add_investor"))

        investor.profit_percent = profit_percent
        db.session.commit()
    except:
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–∏–±—ã–ª–∏', "danger")
    return redirect(url_for('add_investor'))


@app.route("/investors/delete/<int:investor_id>", methods=["POST"])
@login_required
def delete_investor(investor_id):
    investor = Investor.query.get_or_404(investor_id)

    if investor.user_id != current_user.id:
        abort(403)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    if investor.items:
        flash("–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ ‚Äî –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.", "danger")
        return redirect(url_for("add_investor"))

    db.session.delete(investor)
    db.session.commit()
    flash("–ò–Ω–≤–µ—Å—Ç–æ—Ä —É–¥–∞–ª—ë–Ω.", "info")
    return redirect(url_for("add_investor"))



#–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–Ω—É—Ç—Ä–∏

@app.route("/payments")
@login_required
def payments():
    try:
        selected_id = request.args.get("investor_id", type=int)
        investors = Investor.query.filter_by(user_id=current_user.id).all()

        item_query = Item.query.filter_by(user_id=current_user.id)
        payment_query = Payment.query.join(Item).filter(
            Payment.user_id == current_user.id,
            Item.user_id == current_user.id
        )

        # üîΩ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä—É
        if selected_id is not None:
            item_query = item_query.filter(Item.investor_id == selected_id)
            payment_query = payment_query.filter(Item.investor_id == selected_id)
            balances = Balance.query.filter_by(user_id=current_user.id, investor_id=selected_id).all()
        else:
            balances = Balance.query.filter_by(user_id=current_user.id).all()

        items = item_query.all()
        payments = payment_query.all()

        total_invested = sum(item.purchase_price or 0 for item in items)
        total_paid = sum(payment.amount for payment in payments)

        active_items = [item for item in items if item.status == "–û—Ñ–æ—Ä–º–ª–µ–Ω"]
        monthly_profit = sum(
            ((item.price or 0) - (item.purchase_price or 0)) / item.installments
            for item in active_items
            if item.installments and item.price and item.purchase_price
        )
        total_profit = sum(
            (item.price or 0) - (item.purchase_price or 0)
            for item in items
            if item.price and item.purchase_price
        )

        # üîΩ –ü—Ä–∏–±—ã–ª—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
        investor_profit = {}
        for investor in investors:
            investor_profit[investor.id] = total_profit * (investor.profit_percent / 100)

        # üîΩ –í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å (–æ–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –º–∏–Ω—É—Å –ø—Ä–∏–±—ã–ª—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤)
        my_profit = total_profit - sum(investor_profit.values())

        return render_template(
            "payments.html",
            total_invested=round(total_invested, 2),
            total_paid=round(total_paid, 2),
            monthly_profit=round(monthly_profit, 2),
            total_profit=round(total_profit, 2),
            my_profit=round(my_profit, 2),
            investor_profit=investor_profit,
            items=items,
            payments=payments,
            investors=investors,
            selected_id=selected_id,
            balances=balances  # üëà –ø–µ—Ä–µ–¥–∞—ë–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞
        )

    except Exception as e:
        app.logger.error(f"Error in payments route: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", 500

@app.route("/add_payment", methods=["GET", "POST"])
@login_required
def add_payment():
    selected_client = request.args.get("client_name") or request.form.get("client_name")
    payments = []
    error = None

    all_clients = sorted(
        [
            c[0]
            for c in db.session.query(Item.client_name)
            .filter(Item.user_id == current_user.id)
            .distinct()
            .all()
            if c[0]
        ],
        key=lambda x: str(x).lower()
    )

    # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –î–û if
    items = []
    items_data = []  # ‚Üê —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    if selected_client:
        try:
            exact_client_name = next(
                (
                    name for name in db.session.query(Item.client_name)
                    .filter(Item.user_id == current_user.id)
                    .distinct()
                    .all()
                    if name[0] and name[0].lower() == selected_client.lower()
                ),
                (selected_client,)
            )[0]

            items = Item.query.filter(
                db.func.lower(Item.client_name) == db.func.lower(exact_client_name),
                Item.user_id == current_user.id,
                Item.status == "–û—Ñ–æ—Ä–º–ª–µ–Ω"
            ).all()

            # ‚úÖ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
            items_data = [
                {
                    "id": item.id,
                    "name": item.name,
                    "price": float(item.price) if item.price else 0.0,
                    "purchase_price": float(item.purchase_price) if item.purchase_price else 0.0,
                }
                for item in items
            ]

            payments = db.session.query(Payment) \
                .join(Item) \
                .filter(
                    db.func.lower(Item.client_name) == db.func.lower(exact_client_name),
                    Item.user_id == current_user.id
                ) \
                .order_by(Payment.id.desc()) \
                .all()

        except Exception as e:
            error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            items_data = []  # ‚Üê –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏
            payments = []

    # ... (POST-–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)




    if request.method == "POST":
        if not current_user.active_license:
            flash("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏!", "danger")
            return redirect(url_for("add_payment"))

        try:
            item_id = int(request.form.get("item_id"))
            amount = float(request.form.get("amount"))
            created_at_str = request.form.get("created_at")
            created_at = datetime.strptime(created_at_str, "%Y-%m-%d") if created_at_str else datetime.utcnow()

            item = Item.query.filter_by(id=item_id, user_id=current_user.id).first()
            if not item:
                raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

            # –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —Å—á—ë—Ç (Balance), —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            # –ù–∞–π–¥—ë–º –Ω—É–∂–Ω—ã–π —Å—á—ë—Ç (Balance), —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if item.investor_id:
                balance = Balance.query.filter_by(
                    user_id=current_user.id,
                    investor_id=item.investor_id
                ).order_by(Balance.is_default.desc(), Balance.created_at.desc()).first()
            else:
                balance = Balance.query.filter_by(
                    user_id=current_user.id,
                    investor_id=None
                ).order_by(Balance.is_default.desc(), Balance.created_at.desc()).first()

            if not balance:
                raise Exception("–ù–µ –Ω–∞–π–¥–µ–Ω —Å—á—ë—Ç –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –Ω–∞ —Å—á—ë—Ç, –∞ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
            balance.amount += amount

            if balance.amount < amount:
                raise Exception("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
            payment = Payment(
                item_id=item_id,
                user_id=current_user.id,
                amount=amount,
                created_at=created_at
            )
            db.session.add(payment)

            # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –≤—Å—ë –≤—ã–ø–ª–∞—á–µ–Ω–æ
            total_paid = sum(p.amount for p in item.payments) + amount
            if item.price and total_paid >= item.price:
                item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω"

            db.session.commit()

            flash("–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            return redirect(url_for("add_payment", client_name=selected_client))

        except Exception as e:
            db.session.rollback()
            error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}"

    return render_template(
        "add_payment.html",
        items=items_data,  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
        all_clients=all_clients or [],
        payments=payments or [],
        client_name=selected_client,
        current_date=datetime.today().strftime("%Y-%m-%d"),
        error=error,
    )

@app.route("/search_clients")
@login_required
def search_clients():
    term = request.args.get("term", "")
    clients = (
        db.session.query(Item.client_name)
        .filter(Item.client_name.ilike(f"%{term}%"))
        .filter(Item.user_id == current_user.id)
        .distinct()
        .limit(10)
        .all()
    )
    results = [{"label": name[0], "value": name[0]} for name in clients]
    return jsonify(results)



@app.route("/payments/<int:item_id>", methods=["POST"])
@login_required
def make_payment(item_id):
    item = Item.query.filter_by(id=item_id, user_id=current_user.id).first_or_404()

    if not item.price or not item.months or item.months == 0:
        flash("–£ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∏–ª–∏ —Å—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏", "danger")
        return redirect(url_for("payments"))

    monthly_payment = round(item.price / item.months, 2)

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã
    total_paid = sum(p.amount for p in item.payments if not p.is_deleted)
    if total_paid >= item.price:
        flash("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—á–µ–Ω", "info")
        return redirect(url_for("payments"))

    # –í—ã–±–æ—Ä —Å—á—ë—Ç–∞
    if item.investor_id:
        balance = Balance.query.filter_by(
            user_id=current_user.id,
            investor_id=item.investor_id
        ).order_by(Balance.is_default.desc(), Balance.created_at.desc()).first()
    else:
        balance = Balance.query.filter_by(
            user_id=current_user.id,
            investor_id=None
        ).order_by(Balance.is_default.desc(), Balance.created_at.desc()).first()

    if not balance:
        flash("–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—á—ë—Ç –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", "danger")
        return redirect(url_for("payments"))

    try:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance.amount += monthly_payment

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞
        total_paid_after = total_paid + monthly_payment

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ —Å—É–º–º–µ
        item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if item.is_paid else "–û—Ñ–æ—Ä–º–ª–µ–Ω"

        # –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂
        payment = Payment(
            item_id=item.id,
            amount=monthly_payment,
            user_id=current_user.id,
            balance_id=balance.id,
            balance_snapshot=balance.amount - monthly_payment,
            description=f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –æ—Ç {item.client_name}",
            is_deleted=False,
            created_at=datetime.utcnow(),
            date=datetime.utcnow()
        )
        db.session.add(payment)
        db.session.commit()

        flash("–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥—ë–Ω", "success")

    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        flash("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", "danger")

    return redirect(url_for("payments"))

@app.route("/api/items_by_client/<client_name>")
@login_required
def items_by_client(client_name):
    items = Item.query.filter_by(client_name=client_name, user_id=current_user.id).all()
    items_data = [
        {"id": item.id, "name": item.name, "price": item.price, "status": item.status}
        for item in items
    ]
    return jsonify(items_data)


@app.route("/delete_payment/<int:payment_id>", methods=["POST"])
@login_required
def delete_payment(payment_id):
    payment = Payment.query.get_or_404(payment_id)
    item = payment.item

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if item.user_id != current_user.id and not current_user.is_admin:

       abort(403)

    # —É–¥–∞–ª—è–µ–º –ø–ª–∞—Ç—ë–∂
    db.session.delete(payment)

    # –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    db.session.flush()  # —á—Ç–æ–±—ã item.payments ¬´—É–≤–∏–¥–µ–ª¬ª —É–¥–∞–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
    item.payments_made = len(item.payments)
    if sum(p.amount for p in item.payments) < item.price:
        item.status = "–û—Ñ–æ—Ä–º–ª–µ–Ω"

    db.session.commit()
    flash("–ü–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω", "danger")

    client_name = request.form.get("client_name") or item.client_name
    return redirect(url_for("add_payment", client_name=client_name))

# –ö–ª–∏–µ–Ω—Ç—ã


@app.route("/clients", methods=["GET", "POST"])
@login_required
def clients():


    search_query = request.form.get("search", "").strip()

    query = db.session.query(Item.client_name).filter(Item.user_id == current_user.id)

    if search_query:
        query = query.filter(Item.client_name.ilike(f"%{search_query}%"))

    client_names = query.distinct().all()

    all_clients_data = []

    for (client_name,) in client_names:
        items = Item.query.filter_by(client_name=client_name, user_id=current_user.id).all()
        client_data = []
        total_debt = 0

        for item in items:
            total_paid = sum(payment.amount for payment in item.payments)
            installment_price = item.price or 0
            down_payment = item.down_payment or 0
            remaining = installment_price - down_payment - total_paid
            if remaining < 0:
                remaining = 0
            total_debt += remaining

            client_data.append({
                "item": item,
                "payments": item.payments,
                "total_paid": total_paid + down_payment,
                "remaining": remaining
            })

        all_clients_data.append({
            "client_name": client_name,
            "client_data": client_data,
            "total_debt": total_debt
        })

    return render_template(
        "clients.html",
        all_clients_data=all_clients_data,
        search_query=search_query
    )


@app.route("/clients/<client_name>")
@login_required
def client_detail(client_name):
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –µ—Å—Ç—å —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    items = Item.query.filter_by(client_name=client_name, user_id=current_user.id).all()

    if not items:
        abort(403)

    client_data = []
    total_debt = 0

    for item in items:
        total_paid = sum(payment.amount for payment in item.payments)
        installment_price = item.price or 0
        down_payment = item.down_payment or 0
        remaining = installment_price - down_payment - total_paid
        if remaining < 0:
            remaining = 0
        total_debt += remaining

        client_data.append({
            "item": item,
            "payments": item.payments,
            "total_paid": total_paid + down_payment,
            "remaining": remaining
        })

    return render_template(
        "client_detail.html",
        client_name=client_name,
        client_data=client_data,
        total_debt=total_debt
    )




@app.route("/items/<int:item_id>/payments", methods=["GET", "POST"])
@login_required
def item_payments(item_id):
    item = Item.query.get_or_404(item_id)
    if item.user_id != current_user.id and not current_user.is_admin:
        abort(403)

    if request.method == "POST":
        if "add_payment" in request.form:
            try:
                amount = float(request.form.get("amount"))
                created_at_str = request.form.get("created_at")
                created_at = datetime.strptime(created_at_str, "%Y-%m-%d") if created_at_str else datetime.utcnow()

                # –ù–ê–•–û–î–ò–ú –°–ß–Å–¢
                balance = Balance.query.filter_by(user_id=current_user.id, is_default=True).first()
                if not balance:
                    flash("–ù–µ—Ç —Å—á—ë—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "danger")
                    return redirect(url_for("item_payments", item_id=item_id))

                # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –î–ï–ù–¨–ì–ò –ù–ê –°–ß–Å–¢ (–ø–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω)
                balance.amount += amount

                # –°–û–ó–î–ê–Å–ú –ü–õ–ê–¢–ï–ñ
                payment = Payment(
                    item_id=item.id,
                    amount=amount,
                    user_id=current_user.id,
                    date=created_at,
                    created_at=created_at
                )
                db.session.add(payment)
                db.session.commit()

                # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
                item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if item.is_paid else "–û—Ñ–æ—Ä–º–ª–µ–Ω"

                db.session.commit()

                flash("–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            except Exception as e:
                db.session.rollback()
                flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}", "danger")


        elif "delete_payment_id" in request.form:

            try:

                payment_id = int(request.form.get("delete_payment_id"))

                payment = Payment.query.get_or_404(payment_id)

                if payment.item.user_id != current_user.id and not current_user.is_admin:
                    abort(403)

                if payment.is_deleted:

                    flash("–ü–ª–∞—Ç—ë–∂ —É–∂–µ —É–¥–∞–ª—ë–Ω.", "info")

                else:

                    # üîé –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç

                    balance = payment.balance_rel  # —á–µ—Ä–µ–∑ relationship

                    if not balance:

                        # ‚ùå –°–≤—è–∑—å —Å–ª–æ–º–∞–Ω–∞: balance_id –µ—Å—Ç—å, –Ω–æ –æ–±—ä–µ–∫—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è

                        flash("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞—ë—Ç—Å—è –Ω–∞–π—Ç–∏ —Å—á—ë—Ç –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞. –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.", "danger")

                        app.logger.error(
                            f"Payment {payment.id} has balance_id={payment.balance_id}, but balance_rel is None")

                    elif balance.user_id != current_user.id:

                        # ‚ùå –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É —Å—á—ë—Ç—É

                        flash("–û—à–∏–±–∫–∞: —Å—á—ë—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", "danger")

                    else:

                        # ‚úÖ –í—Å—ë –æ–∫ ‚Äî —Å–ø–∏—Å—ã–≤–∞–µ–º

                        balance.amount -= payment.amount

                        payment.is_deleted = True

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞

                        item = payment.item

                        total_paid = sum(p.amount for p in item.payments if not p.is_deleted)

                        item.status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if total_paid >= item.price else "–û—Ñ–æ—Ä–º–ª–µ–Ω"

                        db.session.commit()

                        flash("–ü–ª–∞—Ç—ë–∂ —É–¥–∞–ª—ë–Ω ‚Äî —Å—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∞ —Å —Å—á—ë—Ç–∞", "warning")

                        return redirect(url_for("item_payments", item_id=item.id))


            except Exception as e:

                db.session.rollback()

                app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

                flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", "danger")

            return redirect(url_for("item_payments", item_id=item_id))


    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
    payments = Payment.query.filter_by(item_id=item.id).order_by(Payment.created_at.desc()).all()

    total_paid = sum(p.amount for p in payments if not p.is_deleted)
    down_payment = item.down_payment or 0
    installment_price = item.price or 0
    remaining = max(installment_price - total_paid - down_payment, 0)
    current_date = datetime.today().strftime("%Y-%m-%d")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not item.access_token:
        item.generate_access_token()
        db.session.commit()

    return render_template(
        "item_payments.html",
        item=item,
        payments=payments,
        total_paid=total_paid,
        remaining=remaining,
        current_date=current_date
    )






#pdf —ç–∫—Å–ø–æ—Ä—Ç

@app.route("/pdf/<string:token>")
def export_pdf_by_token(token):
    item = Item.query.filter_by(access_token=token).first_or_404()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    if not item.token_created_at or item.token_created_at < datetime.utcnow() - timedelta(days=7):
        abort(403, description="–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç—ë–∫.")

    # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    payments = Payment.query.filter_by(
        item_id=item.id,
        is_deleted=False  # ‚úÖ –¢–æ–ª—å–∫–æ –Ω–µ—É–¥–∞–ª—ë–Ω–Ω—ã–µ
    ).order_by(Payment.created_at.asc()).all()

    # PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    buffer = BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        leftMargin=60,
        rightMargin=40,
        topMargin=40,
        bottomMargin=30
    )

    font_path = os.path.join('static', 'fonts', 'DejaVuSans.ttf')
    pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
    styles = getSampleStyleSheet()
    styleH = ParagraphStyle('Heading', parent=styles['Heading2'], fontName='DejaVuSans', fontSize=16, leading=20, alignment=1)
    styleN = ParagraphStyle('Normal', parent=styles['Normal'], fontName='DejaVuSans', fontSize=12, leading=15)

    elements = []

    # ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–æ: —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    total_paid = item.down_payment + sum(p.amount for p in payments)
    remaining = item.price - total_paid

    elements.extend([
        Paragraph("–ê–∫—Ç —Å–≤–µ—Ä–∫–∏", styleH),
        Spacer(1, 12),
        Paragraph(f"–ö–ª–∏–µ–Ω—Ç: {item.client_name}", styleN),
        Spacer(1, 10),
        Paragraph(f"–¢–æ–≤–∞—Ä: {item.name}", styleN),
        Spacer(1, 10),
        Paragraph(f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: {item.created_at.strftime('%d.%m.%Y')}", styleN),
        Spacer(1, 10),
        Paragraph(f"–°—É–º–º–∞: {format_rubles(item.price)}", styleN),
        Spacer(1, 10),
        Paragraph(f"–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: {format_rubles(item.down_payment)}", styleN),
        Spacer(1, 10),
        Paragraph(f"–û–ø–ª–∞—á–µ–Ω–æ: {format_rubles(total_paid)}", styleN),
        Spacer(1, 10),
        Paragraph(f"–û—Å—Ç–∞—Ç–æ–∫: {format_rubles(remaining)}", styleN),
        Spacer(1, 10),
        Paragraph(f"–°—Ä–æ–∫ —Ä–∞—Å—Å—Ä–æ—á–∫–∏: {item.installments} –º–µ—Å.", styleN),
        Spacer(1, 10),
        Paragraph(f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂: {round((item.price - item.down_payment) / item.installments)} ‚ÇΩ", styleN),
        Spacer(1, 12),
    ])

    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    data = [['‚Ññ', '–î–∞—Ç–∞', '–°—É–º–º–∞', '–û—Å—Ç–∞—Ç–æ–∫']]
    current_remaining = item.price  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–π —Ü–µ–Ω—ã
    row_index = 1
    first_payment_row = None

    # –£—á—ë—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞
    if item.down_payment:
        current_remaining -= item.down_payment
        data.append([
            str(row_index),
            f"{item.created_at.strftime('%d.%m.%Y')} (–í–∑–Ω–æ—Å)",
            format_rubles(item.down_payment),
            format_rubles(current_remaining)
        ])
        first_payment_row = row_index
        row_index += 1

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
    for p in payments:
        current_remaining -= p.amount
        data.append([
            str(row_index),
            p.created_at.strftime('%d.%m.%Y'),
            format_rubles(p.amount),
            format_rubles(current_remaining)
        ])
        row_index += 1

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    table = Table(data, colWidths=[30, 140, 100, 100], hAlign='LEFT')

    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
    table_style = [
        ('FONTNAME', (0, 0), (-1, -1), 'DejaVuSans'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4a90e2')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
        ('BACKGROUND', (0, 1), (-1, -1), colors.whitesmoke),
    ]

    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–∑–Ω–æ—Å–∞
    if first_payment_row:
        table_style.append(
            ('BACKGROUND', (0, first_payment_row), (-1, first_payment_row), colors.HexColor('#d0f0c0'))
        )

    table.setStyle(TableStyle(table_style))
    elements.append(table)

    doc.build(elements)
    buffer.seek(0)

    return send_file(
        buffer,
        as_attachment=True,
        download_name=f"{item.client_name}_–∞–∫—Ç_—Å–≤–µ—Ä–∫–∏.pdf",
        mimetype='application/pdf'
    )

@app.route('/whatsapp_link/<int:item_id>')
def whatsapp_link(item_id):
    item = Item.query.get_or_404(item_id)

    if item.user_id != current_user.id and not current_user.is_admin:
        abort(403)

    if not item.client_phone:
        flash("–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", "danger")
        return redirect(url_for('clients'))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if not item.access_token or not item.token_created_at or item.token_created_at < datetime.utcnow() - timedelta(days=7):
        item.generate_access_token()
        db.session.commit()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–∞
    digits = re.sub(r'\D', '', item.client_phone)
    if digits.startswith('8'):
        digits = '7' + digits[1:]
    elif not digits.startswith('7'):
        digits = '7' + digits

    # –°—Å—ã–ª–∫–∞ –Ω–∞ PDF —Å —Ç–æ–∫–µ–Ω–æ–º
    pdf_link = url_for('export_pdf_by_token', token=item.access_token, _external=True)

    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {pdf_link}"
    message_encoded = quote(message)
    whatsapp_url = f"https://wa.me/{digits}?text={message_encoded}"

    return redirect(whatsapp_url)


# –í—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ


@app.route("/contracts")
@login_required
def contracts():
    search_query = request.args.get("q", "").strip()
    created_date_str = request.args.get("created_date", "").strip()

    query = Item.query

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω
    if not current_user.is_admin:
        query = query.filter(Item.user_id == current_user.id)

    # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ—Ä—É—á–∏—Ç–µ–ª—è
    if search_query:
        query = query.filter(
            or_(
                Item.client_name.ilike(f"%{search_query}%"),
                Item.name.ilike(f"%{search_query}%"),
                Item.guarantor_name.ilike(f"%{search_query}%")
            )
        )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    if created_date_str:
        try:
            created_date = datetime.strptime(created_date_str, "%Y-%m-%d").date()
            query = query.filter(db.func.date(Item.created_at) == created_date)
        except ValueError:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.", "danger")

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
    if current_user.is_admin:
        query = query.order_by(Item.created_at.desc())  # –î–ª—è –∞–¥–º–∏–Ω–∞: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ –ø–æ –¥–∞—Ç–µ
    else:
        query = query.order_by(Item.user_contract_number.desc())  # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä–∞

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    items = query.all()

    return render_template(
        "contracts.html",
        items=items,
        search_query=search_query,
        current_date=datetime.today().strftime('%Y-%m-%d')
    )








# –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
@app.route("/overdue")
@login_required
def overdue():
    today = datetime.now().date()
    overdue_items = []

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    query = Item.query.filter_by(status="–û—Ñ–æ—Ä–º–ª–µ–Ω")
    if not current_user.is_admin:
        query = query.filter(Item.user_id == current_user.id)

    items = query.all()

    for item in items:
        if not item.installments or item.installments <= 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Å—Ä–æ—á–∫–∏

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_date
        start_date = None

        # 1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ first_payment_date ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if hasattr(item, 'first_payment_date') and item.first_payment_date:
            start_date = item.first_payment_date
        else:
            # 2. –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ + 1 –º–µ—Å—è—Ü
            first_payment = Payment.query.filter_by(item_id=item.id).order_by(Payment.created_at).first()
            if first_payment:
                start_date = first_payment.created_at.date() + relativedelta(months=1)
            else:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π

        if not start_date:
            continue  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π
        months_total = item.installments
        expected_dates = [start_date + relativedelta(months=i) for i in range(0, months_total)]

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã
        payments = Payment.query.filter_by(item_id=item.id).all()
        paid_months = set((p.created_at.year, p.created_at.month) for p in payments)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        missed = [
            d for d in expected_dates
            if (today >= d + timedelta(days=1)) and ((d.year, d.month) not in paid_months)
        ]

        if missed:
            item.missed_months = missed
            item.total_months = months_total
            item.payments_made = len(payments)
            item.overdue_months = len(missed)
            item.monthly_payment = round((item.price - item.down_payment) / item.installments, 2)
            overdue_items.append(item)

    return render_template("overdue.html",
                         items=overdue_items,
                         overdue_count=len(overdue_items))
@app.template_filter("ru_month")
def ru_month(value):
    return format_date(value, "LLLL yyyy", locale="ru")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: –∏—é–ª—å 2025
@app.context_processor
def inject_overdue_count():
    if current_user.is_authenticated:
        today = datetime.now().date()
        overdue_count = 0

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ —Å—Ç–∞—Ç—É—Å–µ "–û—Ñ–æ—Ä–º–ª–µ–Ω"
        query = Item.query.filter_by(status="–û—Ñ–æ—Ä–º–ª–µ–Ω")
        if not current_user.is_admin:
            query = query.filter(Item.user_id == current_user.id)

        items = query.all()

        for item in items:
            if not item.installments or item.installments <= 0:
                continue

            # === –û–ø—Ä–µ–¥–µ–ª—è–µ–º start_date ===
            start_date = None

            # 1. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ first_payment_date ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
            if hasattr(item, 'first_payment_date') and item.first_payment_date:
                start_date = item.first_payment_date
            else:
                # 2. –ò–Ω–∞—á–µ –±–µ—Ä—ë–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ + 1 –º–µ—Å—è—Ü
                first_payment = Payment.query.filter_by(item_id=item.id).order_by(Payment.created_at).first()
                if first_payment:
                    start_date = first_payment.created_at.date() + relativedelta(months=1)
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π

            if not start_date:
                continue  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

            # === –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π ===
            expected_dates = [start_date + relativedelta(months=i) for i in range(item.installments)]

            # === –ü–æ–ª—É—á–∞–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã ===
            payments = Payment.query.filter_by(item_id=item.id).all()
            paid_months = set((p.created_at.year, p.created_at.month) for p in payments if p.created_at)

            # === –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ===
            for due_date in expected_dates:
                if (today >= due_date + timedelta(days=1)) and ((due_date.year, due_date.month) not in paid_months):
                    overdue_count += 1
                    break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏

        return dict(overdue_count=overdue_count)
    else:
        return dict(overdue_count=0)




@app.route("/balance", methods=["GET", "POST"])
@login_required
def user_balance():
    balances = Balance.query.filter_by(user_id=current_user.id).order_by(Balance.created_at.desc()).all()
    investors = Investor.query.filter_by(user_id=current_user.id).all()  # üëà –î–æ–±–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    investors_dict = {inv.id: inv.name for inv in investors}

    if request.method == "POST":
        balance_id = request.form.get("balance_id")
        amount = float(request.form.get("amount", 0))
        name = request.form.get("account_name", "").strip()
        is_default = request.form.get("is_default") == "on"
        investor_id = request.form.get("investor_id")  # üëà –ø–æ–ª—É—á–∞–µ–º investor_id –∏–∑ —Ñ–æ—Ä–º—ã

        # –ï—Å–ª–∏ "–±–µ–∑ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞", —Ç–æ None
        investor_id = int(investor_id) if investor_id else None

        if is_default:
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å "–æ—Å–Ω–æ–≤–Ω–æ–π" —É –¥—Ä—É–≥–∏—Ö —Å—á–µ—Ç–æ–≤
            Balance.query.filter(
                Balance.user_id == current_user.id,
                Balance.id != balance_id
            ).update({"is_default": False})
            db.session.flush()

        if balance_id:
            balance = Balance.query.filter_by(id=balance_id, user_id=current_user.id).first()
            if balance:
                balance.amount = amount
                balance.name = name or None
                balance.is_default = is_default
                balance.investor_id = investor_id
        else:
            balance = Balance(
                user_id=current_user.id,
                amount=amount,
                name=name or None,
                is_default=is_default,
                investor_id=investor_id
            )
            db.session.add(balance)

        db.session.commit()
        flash("–°—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", "success")
        return redirect(url_for("user_balance"))

    return render_template("balance.html", balances=balances, investors=investors,investors_dict=investors_dict)

@app.route("/balance/delete/<int:account_id>")
@login_required
def delete_account(account_id):
    balance = Balance.query.filter_by(id=account_id, user_id=current_user.id).first_or_404()

    if balance.transactions:  # üëà —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å relationship
        flash("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç ‚Äî –∫ –Ω–µ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.", "danger")
        return redirect(url_for("user_balance"))

    try:
        db.session.delete(balance)
        db.session.commit()
        flash("–°—á—ë—Ç —É–¥–∞–ª—ë–Ω", "info")
    except Exception:
        db.session.rollback()
        flash("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—á—ë—Ç–∞.", "danger")

    return redirect(url_for("user_balance"))


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä "mul"
@app.template_filter('mul')
def mul(value, arg):
    return value * arg

# –§–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Å—Å—Ä–æ—á–∫–∏
@app.template_filter('monthly_payment_calc')
def monthly_payment_calc(item):
    price = item.price or 0
    down_payment = item.down_payment or 0
    installments = item.installments or 1
    return (price - down_payment) / installments





@app.route("/income", methods=["GET", "POST"])
@login_required
def income():
    balances = Balance.query.filter_by(user_id=current_user.id).all()
    if request.method == "POST":
        amount = float(request.form["amount"])
        description = request.form.get("description")
        balance_id = int(request.form.get("balance_id"))

        balance = Balance.query.get(balance_id)
        if balance and balance.user_id == current_user.id:
            transaction = Transaction(
                user_id=current_user.id,
                balance_id=balance_id,
                type="income",
                amount=amount,
                description=description
            )
            balance.amount += amount
            db.session.add(transaction)
            db.session.commit()
            flash("–ü—Ä–∏—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            return redirect(url_for("income"))

    return render_template("income.html", balances=balances)


@app.route("/expense", methods=["GET", "POST"])
@login_required
def expense():
    balances = Balance.query.filter_by(user_id=current_user.id).all()
    if request.method == "POST":
        amount = float(request.form["amount"])
        description = request.form.get("description")
        balance_id = int(request.form.get("balance_id"))

        balance = Balance.query.get(balance_id)
        if balance and balance.user_id == current_user.id:
            transaction = Transaction(
                user_id=current_user.id,
                balance_id=balance_id,
                type="expense",
                amount=amount,
                description=description
            )
            balance.amount -= amount
            db.session.add(transaction)
            db.session.commit()
            flash("–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω", "success")
            return redirect(url_for("expense"))

    return render_template("expense.html", balances=balances)



@app.route("/transactions")
@login_required
def transactions():
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    type_filter = request.args.get("type")  # 'all', 'income', 'expense', 'payment'

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
    def parse_date(date_str):
        return dt.strptime(date_str, "%Y-%m-%d") if date_str else None

    start = parse_date(start_date)
    end = parse_date(end_date)
    if end:
        end = (end.replace(hour=23, minute=59, second=59))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è Transaction
    transaction_query = Transaction.query.filter_by(user_id=current_user.id)
    if start:
        transaction_query = transaction_query.filter(Transaction.created_at >= start)
    if end:
        transaction_query = transaction_query.filter(Transaction.created_at <= end)
    user_transactions = transaction_query.all()

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è Payment
    payment_query = Payment.query.filter_by(user_id=current_user.id, is_deleted=False)
    if start:
        payment_query = payment_query.filter(Payment.created_at >= start)
    if end:
        payment_query = payment_query.filter(Payment.created_at <= end)
    client_payments = payment_query.all()

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    combined = []

    if type_filter == "income":
        combined = [t for t in user_transactions if t.type == "income"]
    elif type_filter == "expense":
        combined = [t for t in user_transactions if t.type == "expense"]
    elif type_filter == "payment":
        combined = client_payments
    else:  # "all" –∏–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞
        combined = user_transactions + client_payments

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    combined.sort(key=lambda x: x.created_at, reverse=False)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    total_income = sum(t.amount for t in user_transactions if t.type == "income")
    total_expense = sum(t.amount for t in user_transactions if t.type == "expense")
    total_payments = sum(p.amount for p in client_payments)

    chart_data = {
        "labels": ["–ü–ª–∞—Ç–µ–∂–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤", "–†—É—á–Ω–æ–π –ø—Ä–∏—Ö–æ–¥", "–†–∞—Å—Ö–æ–¥—ã"],
        "data": [total_payments, total_income, total_expense],
        "colors": [
            "#198754",  # üíö success (–ø–ª–∞—Ç–µ–∂–∏) ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç text-success
            "#0dcaf0",  # üí∑ info (–ø—Ä–∏—Ö–æ–¥) ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç text-info
            "#dc3545"  # ‚ù§Ô∏è danger (—Ä–∞—Å—Ö–æ–¥) ‚Äî —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç text-danger
        ]
    }

    return render_template(
        "transactions.html",
        transactions=combined,
        chart_data=chart_data,
        filters={
            "start_date": start_date,
            "end_date": end_date,
            "type": type_filter
        }
    )




@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)








@app.route("/check_clients", methods=["GET", "POST"])
@login_required
def check_clients():
    search_query = request.args.get("q", "").strip()  # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ–æ—Ä–º—ã

    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = Item.query  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤

    # –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not current_user.is_admin:
        query = query.filter(Item.user_id == current_user.id)

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    if search_query:
        query = query.filter(Item.client_name.ilike(f"%{search_query}%"))

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤
    contracts = query.all()

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    overdue_items = []
    today = datetime.now().date()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for item in contracts:
        if item.status == "–û—Ñ–æ—Ä–º–ª–µ–Ω":  # –¢–æ–ª—å–∫–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ
            first_payment = Payment.query.filter_by(item_id=item.id).filter(Payment.created_at != None).order_by(Payment.created_at).first()
            if not first_payment:
                continue

            start_date = first_payment.created_at.date()

            months_total = item.installments
            expected_dates = [start_date + relativedelta(months=i + 1) for i in range(months_total)]
            payments = Payment.query.filter_by(item_id=item.id).all()
            paid_months = set((p.created_at.year, p.created_at.month) for p in payments if p.created_at)

            past_due_dates = [d for d in expected_dates if today >= d + timedelta(days=1)]

            missed = []
            for d in past_due_dates:
                if (d.year, d.month) not in paid_months:
                    missed.append(d)

            if missed:
                item.missed_months = missed
                item.total_months = months_total
                item.payments_made = len(paid_months)
                item.overdue_months = len(missed)
                item.monthly_payment = round((item.price - item.down_payment) / item.installments)
                overdue_items.append(item)

    return render_template("check_clients.html", contracts=contracts, overdue_items=overdue_items, search_query=search_query)


@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    if request.method == 'POST':
        current_user.name = request.form.get('name', '').strip()
        current_user.phone = request.form.get('phone', '').strip()
        db.session.commit()
        flash('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'success')
    return render_template('profile.html')

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    with app.app_context():
        db.create_all()
        #app.run(host="127.0.0.1", port=5000, debug=True)  # –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ
        app.run(host="0.0.0.0", port=8080)





